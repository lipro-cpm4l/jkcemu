<html>
<body>
 <h1>Debugger</h1>
  Der Debugger dient dazu, die Programmausf&uuml;hrung
  an beliebiger Stelle anzuhalten,
  einzelne Befehle im Schrittbetrieb abzuarbeiten
  und so das Geschehen im Emulator zu &uuml;berwachen.
  Dabei ist es auch m&ouml;glich,
  die Speicher- und Registerinhalte anzusehen.
  Die Registerinhalte k&ouml;nnen auch ge&auml;ndert werden.
  Zum &Auml;ndern des Speicherinhalts gibt es den
  <a href="memeditor.htm">Speichereditor</a>.
 <br/><br/>


 <h2>1. Debugger starten</h2>
  Sie befinden sich im Hauptfenster und klicken im Men&uuml;
  <em>Extra</em>, Untermen&uuml; <em>Werkzeuge</em>, den Punkt
  <em>Debugger...</em> an.
  Die weitere Beschreibung bezieht sich auf das Debugger-Fenster.
 <br/><br/>


 <h2>2. Programmausf&uuml;hrung anhalten</h2>
  Damit Sie die Speicher- und Registerinhalte ansehen k&ouml;nnen,
  muss die Programmausf&uuml;hrung angehalten werden.
  Daf&uuml;r gibt es zwei M&ouml;glichkeiten:
  <ol>
   <li>
    Sie legen einen oder mehrere Haltepunkte an.
    Wenn w&auml;hrend der Befehlsabarbeitung ein solcher Haltepunkt
    zutrifft, der zudem auch aktiviert sein muss, wird angehalten.
   </li>
   <li>
    Sie klicken im Men&uuml; <em>Debuggen</em> auf den Punkt
    <em>Programmausf&uuml;hrung anhalten</em>.
   </li>
  </ol>
  Jedesmal wenn die Programmausf&uuml;hrung anh&auml;lt,
  wird der Inhalt des Debugger-Fensters aktualisiert, d.h.,
  Sie sehen im linken Bereich des Fensters die Registerinhalte,
  in der Mitte die ersten Bytes der Speicherbereiche,
  auf denen die Doppelregister zeigen und
  unten die n&auml;chsten auszuf&uuml;hrenden Befehle.
 <br/><br/>


 <h2><a name="breakpoint">3. Haltepunkte</a></h2>
  Es gibt f&uuml;nf verschiedene Arten von Haltepunkten,
  die bei unterschiedlichen Bedingungen zum Anhalten
  der Programmausf&uuml;hrung f&uuml;hren.
 <br/><br/>

 <h3>3.1. Haltepunkt auf Programmadresse</h3>
  Das ist die klassische Form eines Haltepunktes.
  Es wird angehalten, wenn die Programmausf&uuml;hrung
  an der angegebenen Adresse (Haltepunktadresse) angelangt ist.
  Zus&auml;tzlich k&ouml;nnen Sie den Wert eines Registers
  pr&uuml;fen lassen.
  Dann wird nur angehalten, wenn neben der Haltepunktadresse
  auch die Registerwertpr&uuml;fung erfolgreich war.
  Diese l&auml;uft folgenderma&szlig;en ab:
  Vor Abarbeitung des Befehls auf der Haltepunktadresse wird der Wert
  des ausgew&auml;hlten Registers mit einer von Ihnen anzugebenden Maske
  UND-verkn&uuml;pft und das Ergebnis dann mit einem ebenfalls von Ihnen
  anzugebenden Vergleichswert verglichen.
  Dabei ist nicht nur ein Vergleich auf Gleichheit m&ouml;glich,
  sondern auch auf Ungleichheit sowie auf gr&ouml;&szlig;er als
  und kleiner als.
 <br/><br/>

 <h3>3.2. Haltepunkt auf Speicherbereich</h3>
  Ein solcher Haltepunkt reagiert auf Zugriffe auf eine Speicherzelle
  bzw. auf einen Speicherbereich.
  Sie k&ouml;nnen angeben, ob nur bei Lese-, nur bei Schreib-
  oder bei Lese- und Schreibzugriffe angehalten werden soll.
  Zus&auml;tzlich k&ouml;nnen Sie den Wert der betreffenden Speicherzelle
  (Lesezugriff) bzw. den zu schreibenden Wert (Schreibzugriff)
  &uuml;berpr&uuml;fen lassen.
  Auch hier geben Sie Maske, Vergleichsoperator und Vergleichswert an.
 <br/><br/>
  <b>Achtung!</b> Der Debugger pr&uuml;ft vor der Ausf&uuml;hrung eines
  jeden Maschinenbefehls, ob dieser auf den angegebenen Speicherbereich
  zugreift.
  Aufgrund dieser Arbeitsweise werden jedoch die Speicherzugriffe,
  die w&auml;hrend einer Interrupt-Annahme get&auml;tigt werden
  (Lesen der Interrupt-Tabelle im Interrupt-Mode&nbsp;2 und
  Kellern der R&uuml;ckkehradresse) von keinem Haltepunkt erkannt.
 <br/><br/>

 <h3>3.3. Haltepunkt auf Eingabetor</h3>
  Bei diesem Haltepunkt geben Sie die Adresse oder den Adressbereich
  eines Eingabetors an.
  Es wird dann an einem Eingabebefehl angehalten,
  der von diesem Eingabetor liest.
 <br/><br/>
  Die Eingabeadresse kann sowohl mit 8&nbsp;Bit (2&nbsp;hexadezimale Ziffern)
  als auch mit 16&nbsp;Bit (4&nbsp;hexadezimale Ziffern) angegeben werden.
  Dementsprechend wird dann auch die Adresse mit 8 oder 16&nbsp;Bit
  gepr&uuml;ft.
 <br/><br/>

 <h3>3.4. Haltepunkt auf Ausgabetor</h3>
  Dieser Haltepunkt ist &auml;hnlich wie einer auf einem Eingabetor,
  nur dass er auf Ausgabebefehle reagiert.
  Zus&auml;tzlich k&ouml;nnen Sie den auszugebenden Wert
  &uuml;berpr&uuml;fen lassen.
 <br/><br/>

 <h3>3.5. Haltepunkt auf Interrupt-Quelle</h3>
  Bei dieser Form eines Haltepunktes geben Sie eine im emulierten
  System vorhandene Interrupt-Quelle (z.B. PIO oder CTC) an.
  Es wird dann angehalten, sobald die Interrupt-Quelle
  einen Interrupt ausl&ouml;st und dieser vom Mikroprozessor
  auch angenommen wird, d.h.,
  es wird vor dem ersten Befehl der Interrupt-Service-Routine angehalten.
 <br/><br/>

 <h3>3.6. Verwaltung der Haltepunkte</h3>
  &Uuml;ber das Men&uuml; <em>Debuggen</em> k&ouml;nnen Sie beliebig
  viele Haltepunkte anlegen.
  Mit dem Kontextmen&uuml; &uuml;ber der jeweiligen Haltepunktliste
  ist das auch m&ouml;glich.
 <br/><br/>
  Um einen Haltepunkt wieder zu entfernen,
  m&uuml;ssen Sie diesen im rechten Bereich des Debugger-Fensters
  durch Anklicken markieren.
  Sie k&ouml;nnen auch mehrere Haltepunkte markieren.
  Anschlie&szlig;end klicken Sie im Men&uuml; <em>Debuggen</em>
  auf den Eintrag <em>Haltepunkte entfernen</em>.
 <br/><br/>
  Optional k&ouml;nnen Sie auch alle Haltepunkte auf einmal entfernen
  (Men&uuml;eintrag <em>Alle Haltepunkte entfernen</em>).
 <br/><br/>
  Haltepunkte, die Sie tempor&auml;r nicht ben&ouml;tigen,
  m&uuml;ssen nicht unbedingt entfernt werden.
  Sie k&ouml;nnen diese Haltepunkte auch einfach deaktivieren
  und sp&auml;ter bei Bedarf wieder aktivieren.
 <br/><br/>
  Der Debugger ist nur solange aktiv, wie das Debugger-Fenster
  sichtbar ist.
  Wenn Sie Haltepunkte angelegt haben und Sie schlie&szlig;en
  das Fenster, werden die Haltepunkte zwar nicht gel&ouml;scht,
  jedoch wird dann dort nicht mehr angehalten.
 <br/><br/>

 <h3>3.7. Haltepunkte importieren</h3>
  Der Debugger bietet die M&ouml;glichkeit,
  Haltepunkte aus einer Datei oder aus der Zwischenablage zu
  <a href="labelimport.htm">importieren</a>.
  Diese Haltepunkte k&ouml;nnen dabei auch einen Namen haben.
  So ist z.B. der Import der Markentabelle eines Assemblers m&ouml;glich,
  um f&uuml;r jede Marke einen Haltepunkt anzulegen.
 <br/><br/>
  Die Markentabelle des JKCEMU-Assemblers k&ouml;nnen Sie sogar
  automatisch in den Debugger importieren lassen.
  Schalten Sie dazu die entsprechende
  <a href="assembler.htm#options">Assembler-Option</a> ein.
 <br/><br/>

 <h2>4. Schrittbetrieb</h2>
  Mit Schrittbetrieb ist gemeint, dass nach dem Anhalten der
  Programmausf&uuml;hrung einzelne Befehle oder Befehlsgruppen
  abgearbeitet werden und danach automatisch wieder
  die Programmausf&uuml;hrung angehalten wird.
 <br/><br/>
  Die Funktionalit&auml;ten des Schrittbetriebs finden Sie im Men&uuml;
  <em>Debuggen</em> unter den Punkten
  <em>Einzelschritt &uuml;ber Aufruf hinweg</em>,
  <em>Einzelschritt in Aufruf hinein</em> und
  <em>Bis RETURN ausf&uuml;hren</em>.
 <br/><br/>
  Den Schrittbetrieb beenden Sie ganz einfach durch Fortsetzung
  der Programmausf&uuml;hrung.
  Klicken Sie dazu im Men&uuml; <em>Debuggen</em> den Punkt
  <em>Bis Haltepunkt ausf&uuml;hren</em> an.
 <br/><br/>
  Wenn Sie sich im Schrittbetrieb befinden und Sie schlie&szlig;en
  des Debugger-Fenster, geht der Emulator in den Pause-Zustand &uuml;ber.
  Sie k&ouml;nnen dann im Hauptfenster im Men&uuml;
  <em>Extra</em> auf <em>Fortsetzen</em> klicken,
  oder Sie &ouml;ffnen wieder den Debugger.
 <br/><br/>

 <h3>4.1. Einzelschritt &uuml;ber Aufruf hinweg</h3>
  Es wird ein einzelner Maschinenbefehl abgearbeitet.
  Handelt es sich jedoch um den Aufruf eines Unterprogramms,
  so wird das ganze Unterprogramm ausgef&uuml;hrt und
  erst danach wieder angehalten.
  Das Ende eines Unterprogramms wird dabei anhand des Stack Pointers erkannt.
  Sobald dieser wieder den gleichen Wert wie vor dem Unterprogrammaufruf
  hat, wird angehalten.
 <br/><br/>
  Blockbefehle und leere DJNZ-Schleifen werden ebenfalls &uuml;bersprungen,
  d.h. sie werden bis zum Ende abgearbeitet.
  Bei der Funktion <em>Einzelschritt &uuml;ber Aufruf hinweg</em>
  wird n&auml;mlich die Programmausf&uuml;hrung niemals angehalten,
  wenn der Befehlszeiger (Program Counter) nach Abarbeitung
  eines Maschinenbefehls immer noch auf den gleichen Befehl zeigt.
 <br/><br/>

 <h3>4.2. Einzelschritt in Aufruf hinein</h3>
  Es wird immer nur ein einzelner Maschinenbefehl abgearbeitet.
  Handelt es sich um den Aufruf eines Unterprogramms,
  so wird nur der CALL-Befehl abgearbeitet und somit vor dem
  ersten Maschinenbefehl des Unterprogramms wieder angehalten.
 <br/><br/>
  Bei Blockbefehlen wird nur ein Zyklus des Blockbefehls abgearbeitet
  und danach wieder angehalten.
 <br/><br/>

 <h3>4.3. Bis RETURN ausf&uuml;hren</h3>
  Es werden die Maschinenbefehle bis zum n&auml;chsten Return-Befehl
  ausgef&uuml;hrt.
  Werden dabei Unterprogramme aufgerufen,
  so werden diese vollst&auml;ndig ausgef&uuml;hrt.
 <br/><br/>

 <h3>4.4. Registerinhalte und Flags &auml;ndern</h3>
  Im Schrittbetrieb, d.h. wenn die Programmausf&uuml;hrung angehalten
  wurde, k&ouml;nnen die Inhalte der Register ge&auml;ndert werden.
  Geben Sie dazu den gew&uuml;nschten neuen Wert in das jeweilige Feld
  hexadezimal ein.
  Die Werte der einzelnen Flags k&ouml;nnen Sie festlegen,
  indem Sie auf die entsprechenden Boxen im oberen Bereich des Fensters
  klicken und so ein H&auml;kchen setzen oder entfernen.
 <br/><br/>


 <h2>5. Befehle aufzeichnen</h2>
  Eine weitere M&ouml;glichkeit der Verfolgung des Geschehens
  im Emulator ist die Befehlsaufzeichnung.
  Dabei werden vor der Abarbeitung eines jeden Maschinenbefehls
  die Adresse, die Inhalte der wichtigsten Register und der
  anstehende Maschinenbefehl in Form einer Zeile in
  eine Textdatei geschrieben.
  Diese k&ouml;nnen Sie sich dann mit einem Editor ansehen,
  z.B. mit dem in JKCEMU eingebauten
  <a href="texteditor.htm">Texteditor</a>.
 <br/><br/>
  Die Befehlsaufzeichnung schalten Sie &uuml;ber den Schalter
  <em>Befehle aufzeichnen</em> im Men&uuml; <em>Debuggen</em>
  ein und wieder aus.
  Immer wenn Sie die Befehlsaufzeichnung einschalten,
  werden Sie nach dem Namen der Datei gefragt,
  in der die Befehle aufgezeichnet werden sollen.
 <br/><br/>
  <b>Achtung!</b> Die Befehlsaufzeichnung schreibt pro Maschinenbefehl
  eine ganze Zeile in eine Textdatei.
  Diese Textdatei w&auml;chst somit sehr schnell und sehr stark an.
  Sie sollten deshalb die Befehlsaufzeichnung nicht zu lange
  eingeschaltet lassen und sicherstellen, dass auf dem Speichermedium
  ausreichend Platz ist.
  Au&szlig;erdem wird die Programmausf&uuml;hrung in Abh&auml;ngigkeit
  von der Schreibgeschwindigkeit des Speichermediums deutlich gebremst.
</body>
</html>
