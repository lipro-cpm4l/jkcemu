<html>
<body>
  <h1>Reassembler</h1>
    Mit dem Reassembler, auch Disassembler genannt,
    k&ouml;nnen Sie die im Arbeitsspeicher des Emulators
    liegenden Bytes in die Assemblersyntax &uuml;bersetzen.
  <br/><br/>
   <ul>
    <li>
     <a href="reassembler.htm#reass">1. Speicherbereich reassemblieren</a>
    </li>
    <li>
     <a href="reassembler.htm#break">2. Halte-/Log-Punkt im Debugger anlegen</a>
    </li>
    <li>
     <a href="reassembler.htm#asm">3. Assembler-Quelltext erzeugen</a>
    </li>
   </ul>
  </br>

  <h2><a name="reass">1. Speicherbereich reassemblieren</a></h2>
    Nach dem Starten des Reassemblers ist die Eingabe der Anfangs-
    und Endadresse des zu reassemblierenden Speicherbereichs erforderlich.
    Anschlie&szlig;end w&auml;hlen Sie den Men&uuml;punkt
    <em>Datei</em> &rarr; <em>Reassemblieren</em> an,
    und das Reassembler-Listing wird in dem Fenster angezeigt.
    Dieses k&ouml;nnen Sie nun speichern oder drucken.
    Undokumentierte Prozessorbefehle sind mit einem Stern
    am Anfang der Mnemonik gekennzeichnet.
  <br/><br/>
    Es ist auch m&ouml;glich,
    das eigentliche Reassemblieren durch Dr&uuml;cken
    der <em>Enter</em>-Taste zu starten,
    solange der Cursor im Eingabefeld f&uuml;r die Endadresse steht.
  <br/><br/>
    Optional k&ouml;nnen Sie eine
    <a href="labelimport.htm">Markentabelle importieren</a>
    (z.B. von einem Assembler),
    um auch im Reassembler Marken bzw. logische Namen zu sehen.
  <br/><br/>
    <b>Achtung!</b> Es wird der Speicherbereich reassembliert,
    den auch der Mikroprozessor zu dem Zeitpunkt sieht.
    Wenn das emulierte System in dem Adressbereich mehrere
    parallel liegende Speicherb&auml;nke hat,
    m&uuml;ssen Sie selbst sicherstellen,
    dass die richtige Bank eingeblendet ist.
  <br/><br/>
    <b>Achtung!</b> Der Reassembler ist nicht in der Lage,
    die Semantik des reassemblierten Programmcodes zu verstehen, d.h.,
    nicht ausf&uuml;hrbare Datenbereiche werden nicht als solche erkannt
    Es werden somit alle Bytes in dem zu reassemblierenden
    Speicherbereich immer als Maschinenbefehle des Mikroprozessors
    interpretiert, unabh&auml;ngig davon, ob diese auch tats&auml;chlich
    ausf&uuml;hrbaren Programmcode darstellen.
  <br/><br/>

  <h2><a name="break">2. Halte-/Log-Punkt im Debugger anlegen</a></h2>
   Im Kontextmen&uuml; (rechte Maustaste) finden Sie einen Men&uuml;eintrag,
   mit dem Sie im <a href="debugger.htm">Debugger</a> einen
   <a href="debugger.htm#bp_pc">Halte-/Log-Punkt auf eine Programmadresse</a>
   anlegen k&ouml;nnen.
   Dabei wird die Adresse, &uuml;ber der Sie das Kontextmen&uuml;
   aufgerufen haben, als Vorbelegung im Halte-/Log-Punkt verwendet.
  <br/><br/>

  <h2><a name="asm">3. Assembler-Quelltext erzeugen</a></h2>
   Der Reassembler ist in der Lage,
   aus dem Reassembler-Listing einen Assembler-Quelltext zu erzeugen,
   den Sie dann in einem Assembler weiter bearbeiten k&ouml;nnen.
   Die Funktionen zum Erzeugen des Quelltextes finden Sie im
   Men&uuml; <em>Datei</em>
   (&rarr; <em>Als Quelltext kopieren</em>
   bzw. &rarr; <em>Als Quelltext speichern...</em>).
  <br/><br/>
    <b>Achtung!</b> Undokumentierte Prozessorbefehle,
    die im Reassembler-Listing mit einem Stern gekennzeichnet sind,
    enthalten im erzeugten Assembler-Listing keinen Stern mehr,
    damit der Assembler keinen Syntax-Fehler meldet.
    Wenn der undokumentierte Befehl nur eine andere Byte-Folge
    eines dokumentierten Befehls ist,
    wird damit automatisch der undokumentierte Befehl
    in einen dokumentierten umgewandelt.
</body>
</html>

